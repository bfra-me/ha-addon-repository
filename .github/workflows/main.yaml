---
name: Main

'on':
  pull_request:
    branches: [main]
    types: [opened, synchronize, ready_for_review, reopened]
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash --noprofile --norc -Eeuo pipefail {0}

jobs:
  prepare:
    runs-on: ubuntu-latest
    name: Prepare
    env:
      MONITORED_FILES: 'apparmor.txt build.yaml config.yaml Dockerfile rootfs/**'
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Find add-on directories
        id: addons
        run: |
          declare -a addons
          declare -a addons_list
          declare -a filters

          for addon in $(find ./ -maxdepth 2 -name config.json -o -name config.yaml -o -name config.yml | cut -d "/" -f2 | sort -u); do
            addons+=("${addon}");
            addons_list+=("\"${addon}\",");
            for file in ${{ env.MONITORED_FILES }}; do
              filters+=("\"${addon}/${file}\",");
            done
          done

          json_list=$(echo ${addons_list[@]} | rev | cut -c 2- | rev)
          filter_list=$(echo ${filters[@]} | rev | cut -c 2- | rev)

          echo "Found addons: ${addons[@]}"
          echo "Found addons (JSON): [${json_list}]"
          echo "addons=${addons[@]}" >> "$GITHUB_OUTPUT"
          echo "addons_list=[${json_list}]" >> "$GITHUB_OUTPUT"
          echo "filters=[${filter_list}]" >> "$GITHUB_OUTPUT"

      - name: Get changed files
        id: filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          filters: |
            changed: ${{ steps.addons.outputs.filters }}
          list-files: shell

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ "${{ steps.filter.outputs.changed_files }}" =~ $addon ]]; then
              if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                changed_addons+=("\"${addon}\",");
              fi
            fi
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)
          if [[ -n ${changed} ]]; then
            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "addons=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No addon had changes that require linting and building";
          fi

  lint-addon:
    if: needs.prepare.outputs.changed == 'true'
    name: Lint add-on ${{ matrix.addon }}
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        addon: ${{ fromJson(needs.prepare.outputs.changed_addons) }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🚀 Run Home Assistant Add-on Lint
        uses: frenck/action-addon-linter@4d0965b4072596c4b2768a1d9eb6edd41d639a63 # v2.18.0
        with:
          path: './${{ matrix.addon }}'

  lint-prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: 💅🏽 Run Prettier
        uses: creyD/prettier_action@31355f8eef017f8aeba2e0bc09d8502b13dbbad1 # v4.3
        env:
          PRETTIER_VERSION: 3.4.2 # renovate: datasource=npm depName=prettier
        with:
          dry: true
          only_changed: true
          prettier_options: --check .
          prettier_version: ${{ env.PRETTIER_VERSION }}

  lint:
    name: Lint
    needs: [lint-addon, lint-prettier]
    runs-on: ubuntu-latest
    steps:
      - name: Complete
        run: echo "Lint completed"

  build-addon:
    needs: [prepare]
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.changed == 'true'
    name: Build add-on ${{ matrix.addon }}-${{ matrix.arch }}
    env:
      BUILD_ARGS: '--test'

    strategy:
      matrix:
        addon: ${{ fromJson(needs.prepare.outputs.changed_addons) }}
        arch: ['aarch64', 'amd64', 'armhf', 'armv7']

    steps:
      - name: Check out repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Setup yq
        uses: chrisdickinson/setup-yq@fa3192edd79d6eb0e4e12de8dde3a0c26f2b853b
        with:
          yq-version: 4.45.1

      - name: Get metadata
        id: metadata
        run: |
          archs=[]
          image=""
          version=""

          for ext in json yml yaml; do
            if [[ -f "${{ env.addon }}/build.${ext}" ]]; then
              archs=$(yq e -N -M '.build_from | keys' -o=json -I=0 "${{ env.addon }}/build.${ext}")
              break
            elif [[ -f "${{ env.addon }}/config.${ext}" ]]; then
              archs=$(yq e -N -M '.arch' -o=json -I=0 "${{ env.addon }}/config.${ext}")
              break
            else
              echo "No build.${ext} or config.${ext} found in ${{ env.addon }}"
            fi
          done

          for ext in json yml yaml; do
            if [[ -f "${{ env.addon }}/config.${ext}" ]]; then
              image=$(yq e -N -M '.image' -o=json -I=0 "${{ env.addon }}/config.${ext}")
              version=$(yq e -N -M '.version' -o=json -I=0 "${{ env.addon }}/config.${ext}")
              break
            fi
          done

          echo "Architectures: $archs"
          echo "Image: $image"
          echo "Version: $version"

          echo "architectures=$archs" >> "$GITHUB_OUTPUT"
          echo "image=$image" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"
        env:
          addon: ${{ matrix.addon }}

      - name: Check if add-on is being built for architecture
        id: check
        run: |
          if [[ "${{ steps.metadata.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
            echo "build_arch=true" >> $GITHUB_OUTPUT;
            echo "image=$(echo ${{ steps.metadata.outputs.image }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT;
          else
            echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
          fi

      - name: Set build arguments
        if: >-
          steps.check.outputs.build_arch == 'true' &&
          (
            (github.event_name == 'push' && github.head_ref == '') ||
            github.event_name == 'workflow_dispatch'
          )
        run: echo "BUILD_ARGS=" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        if: env.BUILD_ARGS != '--test'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ matrix.addon }} add-on
        if: steps.check.outputs.build_arch == 'true'
        uses: home-assistant/builder@2024.08.2
        with:
          args: |
            ${{ env.BUILD_ARGS }} \
            --${{ matrix.arch }} \
            --target /data/${{ matrix.addon }} \
            --image "${{ steps.check.outputs.image }}" \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --addon

  build:
    name: Build
    needs: [build-addon]
    runs-on: ubuntu-latest
    steps:
      - name: Complete
        run: echo "Build completed"
